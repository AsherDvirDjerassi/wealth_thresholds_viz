non_dynamic_df[paste(yr,sep=""),"Tax Rate"]
}
# b) Tax threshold: inflation adjust the tax threshold
if(adjust_for_inflation == TRUE & threshold > 1){
threshold <- given_threshold*subset(inflation_adjust$price_deflator, inflation_adjust$year == yr)
} else {
threshold <- given_threshold
}
# c) Total taxable and non-taxable wealth given tax threshold
if(threshold < 1){
df_temp$taxable_wealth <-
df_temp$NETWORTH - wtd.quantile(df_temp$NETWORTH, c(threshold), weight = df_temp$WGT)
}
if(threshold >= 1){
df_temp$taxable_wealth <- df_temp$NETWORTH - threshold
}
# Replace negative taxable wealth values with 0.
df_temp$taxable_wealth[df_temp$taxable_wealth < 0] <- 0
# Aggregate wealth
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth"] <-
sum(df_temp$NETWORTH*df_temp$WGT)
# Aggregate taxable wealth
non_dynamic_df[paste(yr,sep=""),"Taxable Wealth"] <-
sum(subset(df_temp$taxable_wealth, df_temp$taxable_wealth>0)*
subset(df_temp$WGT, df_temp$taxable_wealth>0))
# Aggregate non-taxable wealth
non_dynamic_df[paste(yr,sep=""),"Non-Taxable Wealth"] <-
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth"] -
non_dynamic_df[paste(yr,sep=""),"Taxable Wealth"]
# d) Tax rate (if set)
# Note: If not set, see below in dynamic section.
if(set_tax_rate == TRUE){
non_dynamic_df[paste(yr,sep=""),"Tax Rate"] <- tax_rate
}
# e) 3 year growth rate of total, taxable, and non-taxable (note: missing for 1989) for survey years
varList <- c("Total Net Private Wealth","Taxable Wealth","Non-Taxable Wealth")
for (varName in varList) {
non_dynamic_df[paste(yr,sep=""), paste("Three year growth rate -",varName, sep = " ")] <-
non_dynamic_df[paste(yr,sep=""),varName]/
non_dynamic_df[paste(yr-3,sep=""),varName]
}
# f) Wealth thresholds: all households, median, top 10%, top 1%, and Wealth Tax Threshold
non_dynamic_df[paste(yr,sep=""), "Wealth Threshold for Median"] <-
wtd.quantile(df_temp$NETWORTH, .5 , weight = df_temp$WGT)
non_dynamic_df[paste(yr,sep=""), "Wealth Threshold for Top 10%"] <-
wtd.quantile(df_temp$NETWORTH, .9 , weight = df_temp$WGT)
non_dynamic_df[paste(yr,sep=""), "Wealth Threshold for Top 1%"] <-
wtd.quantile(df_temp$NETWORTH, .99 , weight = df_temp$WGT)
if(threshold <= 1  & (threshold != .5 | threshold != .9 | threshold != .99)){
non_dynamic_df[paste(yr,sep=""), "Wealth Tax Threshold"] <-
wtd.quantile(df_temp$NETWORTH, threshold , weight = df_temp$WGT)
}
if(threshold > 1){
non_dynamic_df[paste(yr,sep=""), "Wealth Tax Threshold"] <- threshold
}
# g) Total wealth - bottom 50%, top 10%, top 1%, & taxed households (if not already covered):
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Bottom 50%"] <-
sum(subset(df_temp$NETWORTH*df_temp$WGT,
df_temp$NETWORTH <= wtd.quantile(df_temp$NETWORTH, .5 , weight = df_temp$WGT)))
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Top 10%"] <-
sum(subset(df_temp$NETWORTH*df_temp$WGT,
df_temp$NETWORTH >= wtd.quantile(df_temp$NETWORTH, .9 , weight = df_temp$WGT)))
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Top 1%"] <-
sum(subset(df_temp$NETWORTH*df_temp$WGT,
df_temp$NETWORTH >= wtd.quantile(df_temp$NETWORTH, .99 , weight = df_temp$WGT)))
if(threshold != .5 | threshold != .9 | threshold != .99){
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Above Wealth Tax Threshold"] <-
sum(subset(df_temp$NETWORTH,
df_temp$NETWORTH >= non_dynamic_df[paste(yr,sep=""), "Wealth Tax Threshold"])*
subset(df_temp$WGT,
df_temp$NETWORTH >= non_dynamic_df[paste(yr,sep=""), "Wealth Tax Threshold"]))
}
# h) Share of total wealth - bottom 50%, top 10%, top 1%, & taxed households (if not already covered):
varList <- c("Bottom 50%", "Top 10%", "Top 1%")
for (varName in varList) {
non_dynamic_df[paste(yr,sep=""), paste(varName, sep = " ","Share")] <-
non_dynamic_df[paste(yr,sep=""), paste("Total Net Private Wealth -", sep = " ", varName)] /
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth"]
}
if(threshold != .5 | threshold != .9 | threshold != .99){
non_dynamic_df[paste(yr,sep=""),"Share Above Wealth Tax Threshold"] <-
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Above Wealth Tax Threshold"] /
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth"]
}
} # End of iteration over survey years
tax_rate
inflation_adjust$price_deflator
# Iterate over all survey years:
for (yr in seq(1989,2019,3)) {
# Generate temp df of scf for iterated year
df_temp <- subset(scf, scf$YEAR == yr)
# a) Total program cost
if(set_total_revenue_required == TRUE){
####### Generate total revenue required
}
# b) Tax threshold
# Note: If adjust_for_inflation is true, deflate the tax threshold (threshold is given in 2019 dollars)
if(adjust_for_inflation == TRUE & threshold > 1){
threshold <- given_threshold*subset(inflation_adjust$price_deflator, inflation_adjust$year == yr)
} else {
threshold <- given_threshold
}
# c) Tax rate (if set)
# Note: If not set, see below in dynamic section.
if(set_tax_rate == TRUE){
non_dynamic_df[paste(yr,sep=""),"Tax Rate"] <- tax_rate
}
# d) Total taxable and non-taxable wealth given tax threshold
if(threshold < 1){
df_temp$taxable_wealth <-
df_temp$NETWORTH - wtd.quantile(df_temp$NETWORTH, c(threshold), weight = df_temp$WGT)
}
if(threshold >= 1){
df_temp$taxable_wealth <- df_temp$NETWORTH - threshold
}
# Replace negative taxable wealth values with 0.
df_temp$taxable_wealth[df_temp$taxable_wealth < 0] <- 0
# Aggregate wealth
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth"] <-
sum(df_temp$NETWORTH*df_temp$WGT)
# Aggregate taxable wealth
non_dynamic_df[paste(yr,sep=""),"Taxable Wealth"] <-
sum(subset(df_temp$taxable_wealth, df_temp$taxable_wealth>0)*
subset(df_temp$WGT, df_temp$taxable_wealth>0))
# Aggregate non-taxable wealth
non_dynamic_df[paste(yr,sep=""),"Non-Taxable Wealth"] <-
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth"] -
non_dynamic_df[paste(yr,sep=""),"Taxable Wealth"]
# e) 3 year growth rate of total, taxable, and non-taxable (note: missing for 1989) for survey years
varList <- c("Total Net Private Wealth","Taxable Wealth","Non-Taxable Wealth")
for (varName in varList) {
non_dynamic_df[paste(yr,sep=""), paste("Three year growth rate -",varName, sep = " ")] <-
non_dynamic_df[paste(yr,sep=""),varName]/
non_dynamic_df[paste(yr-3,sep=""),varName]
}
# f) Wealth thresholds: all households, median, top 10%, top 1%, and Wealth Tax Threshold
non_dynamic_df[paste(yr,sep=""), "Wealth Threshold for Median"] <-
wtd.quantile(df_temp$NETWORTH, .5 , weight = df_temp$WGT)
non_dynamic_df[paste(yr,sep=""), "Wealth Threshold for Top 10%"] <-
wtd.quantile(df_temp$NETWORTH, .9 , weight = df_temp$WGT)
non_dynamic_df[paste(yr,sep=""), "Wealth Threshold for Top 1%"] <-
wtd.quantile(df_temp$NETWORTH, .99 , weight = df_temp$WGT)
if(threshold <= 1  & (threshold != .5 | threshold != .9 | threshold != .99)){
non_dynamic_df[paste(yr,sep=""), "Wealth Tax Threshold"] <-
wtd.quantile(df_temp$NETWORTH, threshold , weight = df_temp$WGT)
}
if(threshold > 1){
non_dynamic_df[paste(yr,sep=""), "Wealth Tax Threshold"] <- threshold
}
# g) Total wealth - bottom 50%, top 10%, top 1%, & taxed households (if not already covered):
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Bottom 50%"] <-
sum(subset(df_temp$NETWORTH*df_temp$WGT,
df_temp$NETWORTH <= wtd.quantile(df_temp$NETWORTH, .5 , weight = df_temp$WGT)))
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Top 10%"] <-
sum(subset(df_temp$NETWORTH*df_temp$WGT,
df_temp$NETWORTH >= wtd.quantile(df_temp$NETWORTH, .9 , weight = df_temp$WGT)))
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Top 1%"] <-
sum(subset(df_temp$NETWORTH*df_temp$WGT,
df_temp$NETWORTH >= wtd.quantile(df_temp$NETWORTH, .99 , weight = df_temp$WGT)))
if(threshold != .5 | threshold != .9 | threshold != .99){
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Above Wealth Tax Threshold"] <-
sum(subset(df_temp$NETWORTH,
df_temp$NETWORTH >= non_dynamic_df[paste(yr,sep=""), "Wealth Tax Threshold"])*
subset(df_temp$WGT,
df_temp$NETWORTH >= non_dynamic_df[paste(yr,sep=""), "Wealth Tax Threshold"]))
}
# h) Share of total wealth - bottom 50%, top 10%, top 1%, & taxed households (if not already covered):
varList <- c("Bottom 50%", "Top 10%", "Top 1%")
for (varName in varList) {
non_dynamic_df[paste(yr,sep=""), paste(varName, sep = " ","Share")] <-
non_dynamic_df[paste(yr,sep=""), paste("Total Net Private Wealth -", sep = " ", varName)] /
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth"]
}
if(threshold != .5 | threshold != .9 | threshold != .99){
non_dynamic_df[paste(yr,sep=""),"Share Above Wealth Tax Threshold"] <-
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Above Wealth Tax Threshold"] /
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth"]
}
} # End of iteration over survey years
given_threshold = 30000000
r = .03
given_threshold = 30000000
tax_rate = 0
total_revenue_required <- rep(198900000,31)
# Iterate over all survey years:
for (yr in seq(1989,2019,3)) {
# Generate temp df of scf for iterated year
df_temp <- subset(scf, scf$YEAR == yr)
# a) Total program cost
if(set_total_revenue_required == TRUE){
####### Generate total revenue required
}
# b) Tax threshold
# Note: If adjust_for_inflation is true, deflate the tax threshold (threshold is given in 2019 dollars)
if(adjust_for_inflation == TRUE & threshold > 1){
threshold <- given_threshold*subset(inflation_adjust$price_deflator, inflation_adjust$year == yr)
} else {
threshold <- given_threshold
}
# c) Tax rate (if set)
# Note: If not set, see below in dynamic section.
if(set_tax_rate == TRUE){
non_dynamic_df[paste(yr,sep=""),"Tax Rate"] <- tax_rate
}
# d) Total taxable and non-taxable wealth given tax threshold
if(threshold < 1){
df_temp$taxable_wealth <-
df_temp$NETWORTH - wtd.quantile(df_temp$NETWORTH, c(threshold), weight = df_temp$WGT)
}
if(threshold >= 1){
df_temp$taxable_wealth <- df_temp$NETWORTH - threshold
}
# Replace negative taxable wealth values with 0.
df_temp$taxable_wealth[df_temp$taxable_wealth < 0] <- 0
# Aggregate wealth
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth"] <-
sum(df_temp$NETWORTH*df_temp$WGT)
# Aggregate taxable wealth
non_dynamic_df[paste(yr,sep=""),"Taxable Wealth"] <-
sum(subset(df_temp$taxable_wealth, df_temp$taxable_wealth>0)*
subset(df_temp$WGT, df_temp$taxable_wealth>0))
# Aggregate non-taxable wealth
non_dynamic_df[paste(yr,sep=""),"Non-Taxable Wealth"] <-
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth"] -
non_dynamic_df[paste(yr,sep=""),"Taxable Wealth"]
# e) 3 year growth rate of total, taxable, and non-taxable (note: missing for 1989) for survey years
varList <- c("Total Net Private Wealth","Taxable Wealth","Non-Taxable Wealth")
for (varName in varList) {
non_dynamic_df[paste(yr,sep=""), paste("Three year growth rate -",varName, sep = " ")] <-
non_dynamic_df[paste(yr,sep=""),varName]/
non_dynamic_df[paste(yr-3,sep=""),varName]
}
# f) Wealth thresholds: all households, median, top 10%, top 1%, and Wealth Tax Threshold
non_dynamic_df[paste(yr,sep=""), "Wealth Threshold for Median"] <-
wtd.quantile(df_temp$NETWORTH, .5 , weight = df_temp$WGT)
non_dynamic_df[paste(yr,sep=""), "Wealth Threshold for Top 10%"] <-
wtd.quantile(df_temp$NETWORTH, .9 , weight = df_temp$WGT)
non_dynamic_df[paste(yr,sep=""), "Wealth Threshold for Top 1%"] <-
wtd.quantile(df_temp$NETWORTH, .99 , weight = df_temp$WGT)
if(threshold <= 1  & (threshold != .5 | threshold != .9 | threshold != .99)){
non_dynamic_df[paste(yr,sep=""), "Wealth Tax Threshold"] <-
wtd.quantile(df_temp$NETWORTH, threshold , weight = df_temp$WGT)
}
if(threshold > 1){
non_dynamic_df[paste(yr,sep=""), "Wealth Tax Threshold"] <- threshold
}
# g) Total wealth - bottom 50%, top 10%, top 1%, & taxed households (if not already covered):
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Bottom 50%"] <-
sum(subset(df_temp$NETWORTH*df_temp$WGT,
df_temp$NETWORTH <= wtd.quantile(df_temp$NETWORTH, .5 , weight = df_temp$WGT)))
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Top 10%"] <-
sum(subset(df_temp$NETWORTH*df_temp$WGT,
df_temp$NETWORTH >= wtd.quantile(df_temp$NETWORTH, .9 , weight = df_temp$WGT)))
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Top 1%"] <-
sum(subset(df_temp$NETWORTH*df_temp$WGT,
df_temp$NETWORTH >= wtd.quantile(df_temp$NETWORTH, .99 , weight = df_temp$WGT)))
if(threshold != .5 | threshold != .9 | threshold != .99){
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Above Wealth Tax Threshold"] <-
sum(subset(df_temp$NETWORTH,
df_temp$NETWORTH >= non_dynamic_df[paste(yr,sep=""), "Wealth Tax Threshold"])*
subset(df_temp$WGT,
df_temp$NETWORTH >= non_dynamic_df[paste(yr,sep=""), "Wealth Tax Threshold"]))
}
# h) Share of total wealth - bottom 50%, top 10%, top 1%, & taxed households (if not already covered):
varList <- c("Bottom 50%", "Top 10%", "Top 1%")
for (varName in varList) {
non_dynamic_df[paste(yr,sep=""), paste(varName, sep = " ","Share")] <-
non_dynamic_df[paste(yr,sep=""), paste("Total Net Private Wealth -", sep = " ", varName)] /
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth"]
}
if(threshold != .5 | threshold != .9 | threshold != .99){
non_dynamic_df[paste(yr,sep=""),"Share Above Wealth Tax Threshold"] <-
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth - Above Wealth Tax Threshold"] /
non_dynamic_df[paste(yr,sep=""),"Total Net Private Wealth"]
}
} # End of iteration over survey years
varList <- list("Bottom 50%", "Top 10%", "Top 1%", "Taxable Households")
for(varName in List){
dynamic_df[paste("Post-tax Share -", varName, "(simulated)", "")] <- 0
}
non_dynamic_df[paste(yr,sep=""),"Non-Taxable Wealth"]
non_dynamic_df[paste(yr+3,sep=""),paste("Three year growth rate -", sep = " ", varName)]^(1/3)
yr
yr = 2016
non_dynamic_df[paste(yr+3,sep=""),paste("Three year growth rate -", sep = " ", varName)]^(1/3)
varName
varName = "Taxable Wealth"
non_dynamic_df[paste(yr+3,sep=""),paste("Three year growth rate -", sep = " ", varName)]^(1/3)
paste("Annual growth rate -", sep = " ", varName)
# a) Three year growth rate - Taxable wealth for survey and non-survey years
for (yr in seq(1989,2019, 3)) {
varList <- c("Total Net Private Wealth","Taxable Wealth","Non-Taxable Wealth")
if(yr <= 2016){
for (varName in varList) {
dynamic_df[paste(yr,sep=""),paste("Annual growth rate -", sep = " ", varName)] <-
non_dynamic_df[paste(yr+3,sep=""),paste("Three year growth rate -", sep = " ", varName)]^(1/3)
dynamic_df[paste(yr+1,sep=""),paste("Annual growth rate -", sep = " ", varName)] <-
non_dynamic_df[paste(yr+3,sep=""),paste("Three year growth rate -", sep = " ", varName)]^(1/3)
dynamic_df[paste(yr+2,sep=""),paste("Annual growth rate -", sep = " ", varName)] <-
non_dynamic_df[paste(yr+3,sep=""),paste("Three year growth rate -", sep = " ", varName)]^(1/3)
}
}
# b) Taxable Wealth Before and After Tax
for (yr in seq(1989,2019)) {
if(yr == 1989){
dynamic_df[paste(yr,sep=""),"Observed Taxable Wealth (annualized)"] <-
non_dynamic_df[paste(yr,sep=""),"Taxable Wealth"]
dynamic_df[paste(yr,sep=""),"Observed Non-Taxable Wealth (annualized)"] <-
non_dynamic_df[paste(yr,sep=""),"Non-Taxable Wealth"]
dynamic_df[paste(yr,sep=""),"Taxable Wealth Before Tax (simulated)"] <-
non_dynamic_df[paste(yr,sep=""),"Taxable Wealth"]
}
if(yr < 2019){
dynamic_df[paste(yr+1,sep=""),"Observed Taxable Wealth (annualized)"] <-
dynamic_df[paste(yr,sep=""),"Observed Taxable Wealth (annualized)"]*
dynamic_df[paste(yr,sep=""),"Annual growth rate - Taxable wealth"]
dynamic_df[paste(yr+1,sep=""),"Observed Non-Taxable Wealth (annualized)"] <-
dynamic_df[paste(yr,sep=""),"Observed Non-Taxable Wealth (annualized)"]*
dynamic_df[paste(yr,sep=""),"Annual growth rate - Non-Taxable wealth"]
## DOES THIS NEED TO BE ADJUSTED FOR INFLATION - HOW DOES THIS INTERACT WITH INFLATION ADFJUSTMENTS??
if(set_tax_rate == TRUE){
dynamic_df[paste(yr,sep=""),"Tax Rate"] <- tax_rate
}
if(set_tax_rate == FALSE){
dynamic_df[paste(yr,sep=""),"Tax Rate"] <-
dynamic_df[paste(yr,sep=""),"Total Revenue Required"]/
dynamic_df[paste(yr,sep=""),"Taxable Wealth Before Tax (simulated)"]
}
dynamic_df[paste(yr,sep=""),"Taxable Wealth After Tax (simulated)"] <-
dynamic_df[paste(yr,sep=""),"Taxable Wealth Before Tax (simulated)"]*
(1-dynamic_df[paste(yr,sep=""),"Tax Rate"])
if(yr < 2019){
dynamic_df[paste(yr+1,sep=""),"Taxable Wealth Before Tax (simulated)"] <-
dynamic_df[paste(yr,sep=""),"Taxable Wealth After Tax (simulated)"]*
dynamic_df[paste(yr,sep=""),"Annual growth rate - Taxable wealth"]
}
}
# c) Total wealth tax revenue
dynamic_df[,"Wealth Tax Revenue"] <-
dynamic_df[,"Taxable Wealth Before Tax (simulated)"] -
dynamic_df[,"Taxable Wealth After Tax (simulated)"]
# d) Cumulative Wealth Transfer
for (yr in seq(1989,2019)) {
if(yr == 1989){
dynamic_df[paste(yr,sep=""),"Cumulative Wealth Transfer"] <-
dynamic_df[paste(yr,sep=""),"Wealth Tax Revenue"]
} else {
dynamic_df[paste(yr,sep=""),"Cumulative Wealth Transfer"] <-
dynamic_df[paste(yr,sep=""),"Wealth Tax Revenue"] +
dynamic_df[paste(yr-1,sep=""),"Cumulative Wealth Transfer"]
}
}
# e) Cumulative Wealth Transfer and Appreciation
for (yr in seq(1989,2019)) {
if(yr == 1989){
dynamic_df[paste(yr,sep=""),"Cumulative Wealth Transfer and Appreciation"] <-
dynamic_df[paste(yr,sep=""),"Wealth Tax Revenue"]
} else {
dynamic_df[paste(yr,sep=""),"Cumulative Wealth Transfer and Appreciation"] <-
dynamic_df[paste(yr,sep=""),"Wealth Tax Revenue"] +
(dynamic_df[paste(yr-1,sep=""),"Cumulative Wealth Transfer"])*exp(r)
}
}
### MAKE THIS A FOR LOOP THAT ITERATES OVER THE TOP 10 TOP 1 BOTTOM 50 TAXABLE
#
varList <- list("Bottom 50%", "Top 10%", "Top 1%", "Taxable Households")
for(varName in List){
dynamic_df[paste("Post-tax Share -", varName, "(simulated)", "")] <-
}
for (yr in seq(1989,2019, 3)) {
varList <- c("Total Net Private Wealth","Taxable Wealth","Non-Taxable Wealth")
if(yr <= 2016){
for (varName in varList) {
dynamic_df[paste(yr,sep=""),paste("Annual growth rate -", sep = " ", varName)] <-
non_dynamic_df[paste(yr+3,sep=""),paste("Three year growth rate -", sep = " ", varName)]^(1/3)
dynamic_df[paste(yr+1,sep=""),paste("Annual growth rate -", sep = " ", varName)] <-
non_dynamic_df[paste(yr+3,sep=""),paste("Three year growth rate -", sep = " ", varName)]^(1/3)
dynamic_df[paste(yr+2,sep=""),paste("Annual growth rate -", sep = " ", varName)] <-
non_dynamic_df[paste(yr+3,sep=""),paste("Three year growth rate -", sep = " ", varName)]^(1/3)
}
}
}
dynamic_df[,"Taxable Wealth After Tax (simulated)"]/
dynamic_df[paste(yr,sep=""),"Observed Non-Taxable Wealth (annualized)"]
#################################
# Part 1) Non-dynamic Dataframe #
#################################
non_dynamic_df <- data.frame(matrix (nrow = 11, ncol = 0, byrow = 1))
rownames(non_dynamic_df) <- seq(1989,2019,3)
non_dynamic_df$Year <- rownames(non_dynamic_df)
yr
yr -1989
yr = 1989
# Generate temp df of scf for iterated year
df_temp <- subset(scf, scf$YEAR == yr)
set_total_revenue_required
scf <- read.csv(unzip("scfp2019.zip"), header = TRUE)
system("rm scfp2019.csv") # rm csv of scf
scf <- scf[c("NETWORTH","WGT")]
scf$YEAR <- 2019
# NOTE: To scrape and clean raw Forbes 400 data for 2019, replace FALSE with TRUE
if(FALSE) {
# scrape raw forbes 400 data for 2019
forbes_400_2019 <- cbind.data.frame(jsonlite::fromJSON(paste0("http://www.forbes.com/ajax/list/data?year=", 2019, "&uri=forbes-400", "&type=person")),year= 2019)
# rename variables
colnames(forbes_400_2019)[colnames(forbes_400_2019) == "worth"] ="NETWORTH"
colnames(forbes_400_2019)[colnames(forbes_400_2019) == "year"] ="YEAR"
# create sample weights
forbes_400_2019$WGT <- 1
# transform networth value
forbes_400_2019$NETWORTH <- forbes_400_2019$NETWORTH*1000000
# keep subset of variables
forbes_400_2019 <- forbes_400_2019[c("NETWORTH", "WGT", "YEAR")]
# drop if na values for networth
forbes_400_2019 <- na.omit(forbes_400_2019)
# write csv
write.csv(forbes_400_2019, "forbes_400_2019.csv", row.names = FALSE)
}
forbes_400 <- read.csv("forbes_400_2019.csv")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/3.github/wealth_thresholds_viz")
forbes_400 <- read.csv("forbes_400_2019.csv")
# number of households in net debt - referenced in text
comma(sum(subset(scf$WGT, scf$NETWORTH < 0)))
# create quantiles
df_quantiles <- data.frame(matrix (nrow = 100, ncol = 0, byrow = 1))
df_quantiles$quantiles <-  c(seq(1, 99, by = 1), "Forbes 400")
df_quantiles$quantiles[100] <- c("Forbes 400")
df_quantiles$"Forbes 400" <- 0
df_quantiles$"Forbes 400"[100] <- min(subset(forbes_400$NETWORTH, forbes_400$YEAR == 2019))
df_quantiles$Thresholds <-
c(wtd.quantile(scf$NETWORTH, seq(.01, .99, by = .01), weight = scf$WGT), NA)
# Used for its  comma function
install.packages("formattable", repos = "http://cran.us.r-project.org")
library("formattable")
# The wrapper for highcharts, highcharter, imports most need packages in addition to being core to the visualizatio.
# Imported dependencies:	htmlwidgets, magrittr, purrr, rlist, assertthat, zoo, dplyr (≥ 1.0.0), tibble (≥ 1.1), stringr (≥ 1.3.0), broom, xts, quantmod, tidyr, htmltools, jsonlite, igraph, lubridate, yaml, rlang (≥ 0.1.1), rjson
install.packages("highcharter", repos = "http://cran.us.r-project.org")
library("highcharter") # For highcharter visualization
# Import the redlist, which is used for computing weighted statistics, included weighted quantiles.
# Imported dependencies: ps, processx, checkmate, matrixStats, callr, crayon, prettyunits, rprojroot, inline, gridExtra, loo, pkgbuild, desc, Rcpp, rstan, rstantools, BH, RcppArmadillo, RcppEigen, RcppParallel, StanHeaders, densEstBayes
install.packages("reldist", repos = "http://cran.us.r-project.org")
library("reldist")  #For computing weighted statistics
# Allows saving an HTML object to a file
install.packages("htmltools", repos = "http://cran.us.r-project.org")
library("htmltools")
# Checks if pandoc is installed and prints its location
install.packages("pandoc", repos = "http://cran.us.r-project.org")
library("pandoc")
if(!pandoc_available()){
pandoc_install()
pandoc_activate()
}
pandoc_available()
install.packages("htmltools", repos = "http://cran.us.r-project.org")
# number of households in net debt - referenced in text
comma(sum(subset(scf$WGT, scf$NETWORTH < 0)))
# create quantiles
df_quantiles <- data.frame(matrix (nrow = 100, ncol = 0, byrow = 1))
df_quantiles$quantiles <-  c(seq(1, 99, by = 1), "Forbes 400")
df_quantiles$quantiles[100] <- c("Forbes 400")
df_quantiles$"Forbes 400" <- 0
df_quantiles$"Forbes 400"[100] <- min(subset(forbes_400$NETWORTH, forbes_400$YEAR == 2019))
df_quantiles$Thresholds <-
c(wtd.quantile(scf$NETWORTH, seq(.01, .99, by = .01), weight = scf$WGT), NA)
options(highcharter.theme = hc_theme_smpl(tooltip = list(valueDecimals = 0, thousandsSep = ',')))
lang <- getOption("highcharter.lang")
lang$numericSymbols <- c(" Thousand"," Million"," Billion"," Trillion")
lang$thousandsSep <- ","
options(highcharter.lang = lang)
figure1 <- highchart() %>%
hc_chart(type ="column",
barBorderWidth = 1) %>%
hc_title(text = "Figure 1: Wealth thresholds") %>%
hc_chart(zoomType = "x") %>%
hc_plotOptions(column = list(
dataLabels = list(enabled = FALSE),
stacking = "normal",
groupPadding = 0,
pointPadding = 0,
enableMouseTracking = TRUE)) %>%
hc_yAxis_multiples(
list(title = list(text = "Wealth in 2019 USD", style = list(fontSize = '13px')), opposite = FALSE),
list(title = list(text = "Wealth in 2019 USD", style = list(fontSize = '13px')), opposite = TRUE)) %>%
hc_xAxis(title = list(text = "Wealth Percentiles", style = list(fontSize = '13px')),
categories = df_quantiles$quantiles,
type = "category",
showFirstLabel = TRUE,
showLastLabel = TRUE
) %>%
hc_add_series(data = round(df_quantiles$Thresholds), name = "Wealth Thresholds", color = "grey", showInLegend = FALSE, visible = TRUE) %>%
hc_add_series(name = "<p style='font-size:15px; color:black'> Include Forbes 400 wealth threshold </p>", data = round(df_quantiles$`Forbes 400`), color = "red", showInLegend = TRUE, visible = FALSE,  fontSize = '200px') %>%
hc_legend(
align = "left",
verticalAlign = "top",
x = 75,
y = 0
) %>%
hc_exporting(enabled = TRUE) %>%
hc_tooltip(
useHTML = TRUE,
formatter = JS(
"
function(){
outHTML = '<b> Wealth Percentile: </b>' + this.x + '<br> <b> Threshold Value: </b>' + '$' + Number(this.y).toLocaleString()
return(outHTML)
}
"
),
shape = "callout", # Options are square, circle and callout
borderWidth = 1   # No border on the tooltip shape
)
figure1
